Una alternativa al hardcoding para actualizar la URL de la API de la aplicación es crear un archivo index.ts en una carpeta config.

Allí colocar:

const dev = process.env.NODE_ENV !== 'production';

export const server = dev ? 'http : //localhost:3000' : 'URL Vercel de tu App'; // Cambiará dependiendo de la variable de entorno NODE_ENV
Y en tu archivo index.tsx reemplazas el string construido de fetch API, con la constante server que exportaste en el archivo index.ts de la carpeta config.

import React, { useEffect, useState } from 'react'
import { server } from '../config'; // Importas la constante server

export const getServerSideProps = async () => {

  const response = await fetch(`${server}/api/avo`); // La agregas en Fetch API
Y listo 😊, además de solucionar el error de ruta relativa, también te actualizará los cambios de la base de datos sin necesidad de volver a ejecutar un push en tu proyecto para el servidor.



🔍 #UnderTheHood Server Side Rendering: getServerSideProps
<h4>Ideas/conceptos claves</h4>
Client Side rendered.- El Html se esta produciendo desde el cliente

<h4>Apuntes</h4>
Usamos useEffect para traer la información de la API, debido a esto estamos renderizando desde el cliente. Es decir que desde el servidor no esta información de los elementos.

Para poder extraer los datos desde el cliente lo que debemos hacer es usar la siguiente función:

export const getServerSideProps = async () => {
  // la función fetch debe de venir desde una libreria que nos ayude con la tarea
	const response = await fetch('https://platzi-avo-alpha.vercel.app/api/avo')
  const { data: productList }: TAPIAvoResponse = await response.json()
	// Devuelve un objecto el cual luego se pasara como prop
	// en el componente

  return {
    props: {
      productList,
    },
  }
}

const HomePage = ({ productList }: { productList: TProduct[] }) => {...}