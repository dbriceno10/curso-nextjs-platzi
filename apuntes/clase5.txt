Para los que quieren saber como podemos usar mÃ¡s de un parÃ¡metro, recuerden que el router estÃ¡ basado en el file system, por lo que si queremos mÃ¡s parÃ¡metros nuestro sistema de archivos en pages lucirÃ¡ de la siguiente manera para este ejemplo:
Ruta ejemplo: /users/[id]/edit/[idPost]

File system en pages para la ruta ejemplo

- pages
- - users
- - - [id]
- - - - edit
- - - - - [idPost].js
Dentro de [idPost].js ya podemos obtener el query param o incluso los query que enviemos en la url, sea /users/23/edit/32?title=new title

let {query: {id, idPost, title}} = useRouter()

Â¿CÃ³mo hacer rutas dinÃ¡micas mÃ¡s complejas?
/
Seguramente despuÃ©s de ver esta clase os estarÃ©is preguntandoâ€¦
/
Â¿CÃ³mo diablos puedo crear el cÃ³digo para una ruta dinÃ¡mica mÃ¡s compleja?, NO ME ENSEÃ‘ARON ESO
/

/
Una ruta dinÃ¡mica tal como:
/
localhost:3000/producto/123/comentarios/123
/
Pues yo tambiÃ©n, y creo que he encontrado la soluciÃ³n ðŸ˜Žâ€¦
/
Recordemos por un momento esta clase, lo que hicimos es que creamos una carpeta llamada products y dentro de esa misma carpeta aÃ±adimos un archivo llamado [productId].js
/
Screen Shot 2021-09-24 at 1.21.34 PM.png
/
Esto lo hicimos para ser capaces de obtener una ruta url como:
/
localhost:3000/product/123
/
Sin embargo, muchas veces eso no es suficiente para hacer una pagina web, o especÃ­ficamente, una aplicaciÃ³n web, entonces, lo que debemos de hacer para conseguir una ruta como:
/
localhost:3000/product/123/comments/123
/
Entonces, lo que tenemos que hacer es:
/

Conservar a la carpeta products y borrar el archivo [productId]. js
/
Screen Shot 2021-09-24 at 1.22.37 PM.png
/
En lugar del archivo borrado, crear un nuevo archivo llamado index.js
/
Screen Shot 2021-09-24 at 1.23.32 PM.png
/
(El contenido que este dentro de ese mismo archivo serÃ¡ el contenido que se visualizara cuando busquemos la url: localhost:3000/producto)
/
Crear una carpeta llamada [productId]
/
Screen Shot 2021-09-24 at 1.24.58 PM.png
/
Dentro de esa carpeta antes mencionada, tenemos que aÃ±adir un archivo llamado index. js
/
Screen Shot 2021-09-24 at 1.25.50 PM.png
/
(El contenido que este dentro ese archivo serÃ¡ el contenido que se visualizara cuando busquemos la url: localhost:3000/product/â€˜el id de algÃºn productoâ€™).
/
Dentro de la carpeta products, tambiÃ©n hay que aÃ±adir una carpeta llamada comments tambiÃ©n, entonces dentro de la misma carpeta, tenemos que aÃ±adir un archivo index. js
/
Screen Shot 2021-09-24 at 1.27.09 PM.png
/
(El contenido que este dentro de ese mismo archivo serÃ¡ el contenido que visualizaremos cuando busquemos de la url localhost:3000/producto/â€˜el id de algÃºn productoâ€™/comentarios).
/
Dentro de la misma carpeta, aÃ±adir un archivo [commentId].js
/
Screen Shot 2021-09-24 at 1.28.37 PM.png
/
(El contenido que este dentro de ese mismo archivo serÃ¡ el contenido que visualizaremos cuando busquemos de la url localhost:3000/producto/â€˜el id de algÃºn productoâ€™/comentarios/â€˜el id de algÃºn comentarioâ€™).
/
Importante: Cabe recalcar que aparte de tener acceso al id de un determinado comentario, tambiÃ©n podremos acceder a el id de un determinado producto desde el archivo [comment].jsx
/
Solo hace falta hacer algo como:
/

import React from "react";
import { useRouter } from "next/router";

const Comment = () => {

    const router = useRouter()
    const { productId, commentId } = router.query

    return (
        <div>El comentario { productId } de el producto { commentId }</div>
    )
}

export default Comment;
/
De esta manera obtendremos rutas de url mÃ¡s profesionales, y si queremos hacer rutas dinamicas aun mas complejas, como:
/
localhost:3000/product/123/comments/123/likes/123
/
Debemos de seguir la misma metodologÃ­a aplicada.
/
Espero haberlos podido ayudar a hacerlo chic@s ðŸ˜€.